// File name: final.go
package web

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
)

type AutoGenerated struct {
	Response struct {
		GeoObjectCollection struct {
			FeatureMember []struct {
				GeoObject struct {
					Point struct {
						Pos string `json:"pos"`
					} `json:"Point"`
				} `json:"GeoObject"`
			} `json:"featureMember"`
		} `json:"GeoObjectCollection"`
	} `json:"response"`
}

func getGeo(city string) []float64 {
	url := "https://geocode-maps.yandex.ru/1.x?geocode=" + city + "&apikey=c2355604-f2d6-4d13-a7cf-d2142fa0663d&kind=locality&results=1&format=json"

	res, err := http.Get(url)
	if err != nil {
		log.Fatalln(err)
	}
	body, err := io.ReadAll(res.Body)
	if err != nil {
		log.Fatalln(err)
	}
	// fmt.Println(string(body))
	var jsonGeo AutoGenerated

	err = json.Unmarshal(body, &jsonGeo)
	if err != nil {
		log.Fatal(err)
	}
	center:=make([]float64,2)
	
	coordinates := strings.Split(jsonGeo.Response.GeoObjectCollection.FeatureMember[0].GeoObject.Point.Pos, " ")
	for i, v := range coordinates {
		center[i],err = strconv.ParseFloat(v,64)
		if err!=nil{
			log.Fatalln(err)
		}
	}

	return center
}
